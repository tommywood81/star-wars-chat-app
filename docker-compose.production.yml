version: '3.8'

services:
  # Star Wars RAG Chat Backend API
  star-wars-api:
    build: 
      context: .
      dockerfile: Dockerfile
    ports:
      - "8002:8000"
    environment:
      - PYTHONPATH=/app/src
      - LOG_LEVEL=info
      - API_BASE_URL=http://localhost:8002
    volumes:
      - models_data:/app/models  # Persistent model storage
      - api_logs:/app/logs       # Log persistence
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'
    networks:
      - starwars-network

  # Enhanced Star Wars RAG Dashboard
  star-wars-dashboard:
    build:
      context: .
      dockerfile: Dockerfile.production.web
    ports:
      - "80:8501"  # Production uses port 80
    environment:
      - PYTHONPATH=/app/src
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
      - API_BASE_URL=http://star-wars-api:8000  # Internal Docker network
      - STREAMLIT_THEME_BASE=dark
      - STREAMLIT_BROWSER_GATHER_USAGE_STATS=false
    depends_on:
      star-wars-api:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    networks:
      - starwars-network

  # PostgreSQL Database with pgvector
  postgres:
    image: pgvector/pgvector:pg15
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-star_wars_rag}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}  # Required from env file
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d  # DB initialization
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    networks:
      - starwars-network

  # Reverse Proxy (for production scaling)
  nginx:
    image: nginx:alpine
    ports:
      - "443:443"  # HTTPS
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - star-wars-dashboard
    restart: unless-stopped
    profiles:
      - https  # Only for HTTPS deployments
    networks:
      - starwars-network

volumes:
  postgres_data:
    driver: local
  models_data:
    driver: local
  api_logs:
    driver: local

networks:
  starwars-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
